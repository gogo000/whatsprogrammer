// Generated by the protocol buffer compiler.  DO NOT EDIT!

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "matrix.pb.h"
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ceres {
namespace internal {

namespace {

const ::google::protobuf::Descriptor* BlockProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CellProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CellProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedRowProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedRowProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockStructureProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockStructureProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlockSparseMatrixProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlockSparseMatrixProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TripletSparseMatrixProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TripletSparseMatrixProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* CompressedRowSparseMatrixProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CompressedRowSparseMatrixProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DenseSparseMatrixProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DenseSparseMatrixProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* SparseMatrixProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SparseMatrixProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* LinearLeastSquaresProblemProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LinearLeastSquaresProblemProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_matrix_2eproto() {
  protobuf_AddDesc_matrix_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "matrix.proto");
  GOOGLE_CHECK(file != NULL);
  BlockProto_descriptor_ = file->message_type(0);
  static const int BlockProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockProto, position_),
  };
  BlockProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockProto_descriptor_,
      BlockProto::default_instance_,
      BlockProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockProto));
  CellProto_descriptor_ = file->message_type(1);
  static const int CellProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellProto, block_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellProto, position_),
  };
  CellProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CellProto_descriptor_,
      CellProto::default_instance_,
      CellProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CellProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CellProto));
  CompressedRowProto_descriptor_ = file->message_type(2);
  static const int CompressedRowProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowProto, block_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowProto, cells_),
  };
  CompressedRowProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompressedRowProto_descriptor_,
      CompressedRowProto::default_instance_,
      CompressedRowProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompressedRowProto));
  BlockStructureProto_descriptor_ = file->message_type(3);
  static const int BlockStructureProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStructureProto, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStructureProto, rows_),
  };
  BlockStructureProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockStructureProto_descriptor_,
      BlockStructureProto::default_instance_,
      BlockStructureProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStructureProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockStructureProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockStructureProto));
  BlockSparseMatrixProto_descriptor_ = file->message_type(4);
  static const int BlockSparseMatrixProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSparseMatrixProto, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSparseMatrixProto, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSparseMatrixProto, num_nonzeros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSparseMatrixProto, values_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSparseMatrixProto, block_structure_),
  };
  BlockSparseMatrixProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlockSparseMatrixProto_descriptor_,
      BlockSparseMatrixProto::default_instance_,
      BlockSparseMatrixProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSparseMatrixProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlockSparseMatrixProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlockSparseMatrixProto));
  TripletSparseMatrixProto_descriptor_ = file->message_type(5);
  static const int TripletSparseMatrixProto_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, num_nonzeros_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, values_),
  };
  TripletSparseMatrixProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TripletSparseMatrixProto_descriptor_,
      TripletSparseMatrixProto::default_instance_,
      TripletSparseMatrixProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TripletSparseMatrixProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TripletSparseMatrixProto));
  CompressedRowSparseMatrixProto_descriptor_ = file->message_type(6);
  static const int CompressedRowSparseMatrixProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowSparseMatrixProto, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowSparseMatrixProto, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowSparseMatrixProto, rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowSparseMatrixProto, cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowSparseMatrixProto, values_),
  };
  CompressedRowSparseMatrixProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CompressedRowSparseMatrixProto_descriptor_,
      CompressedRowSparseMatrixProto::default_instance_,
      CompressedRowSparseMatrixProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowSparseMatrixProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CompressedRowSparseMatrixProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CompressedRowSparseMatrixProto));
  DenseSparseMatrixProto_descriptor_ = file->message_type(7);
  static const int DenseSparseMatrixProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseSparseMatrixProto, num_rows_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseSparseMatrixProto, num_cols_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseSparseMatrixProto, values_),
  };
  DenseSparseMatrixProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DenseSparseMatrixProto_descriptor_,
      DenseSparseMatrixProto::default_instance_,
      DenseSparseMatrixProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseSparseMatrixProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DenseSparseMatrixProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DenseSparseMatrixProto));
  SparseMatrixProto_descriptor_ = file->message_type(8);
  static const int SparseMatrixProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMatrixProto, triplet_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMatrixProto, block_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMatrixProto, compressed_row_matrix_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMatrixProto, dense_matrix_),
  };
  SparseMatrixProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SparseMatrixProto_descriptor_,
      SparseMatrixProto::default_instance_,
      SparseMatrixProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMatrixProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SparseMatrixProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SparseMatrixProto));
  LinearLeastSquaresProblemProto_descriptor_ = file->message_type(9);
  static const int LinearLeastSquaresProblemProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearLeastSquaresProblemProto, a_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearLeastSquaresProblemProto, b_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearLeastSquaresProblemProto, d_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearLeastSquaresProblemProto, x_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearLeastSquaresProblemProto, num_eliminate_blocks_),
  };
  LinearLeastSquaresProblemProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LinearLeastSquaresProblemProto_descriptor_,
      LinearLeastSquaresProblemProto::default_instance_,
      LinearLeastSquaresProblemProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearLeastSquaresProblemProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LinearLeastSquaresProblemProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LinearLeastSquaresProblemProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_matrix_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockProto_descriptor_, &BlockProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CellProto_descriptor_, &CellProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompressedRowProto_descriptor_, &CompressedRowProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockStructureProto_descriptor_, &BlockStructureProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlockSparseMatrixProto_descriptor_, &BlockSparseMatrixProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TripletSparseMatrixProto_descriptor_, &TripletSparseMatrixProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CompressedRowSparseMatrixProto_descriptor_, &CompressedRowSparseMatrixProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DenseSparseMatrixProto_descriptor_, &DenseSparseMatrixProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SparseMatrixProto_descriptor_, &SparseMatrixProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LinearLeastSquaresProblemProto_descriptor_, &LinearLeastSquaresProblemProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_matrix_2eproto() {
  delete BlockProto::default_instance_;
  delete BlockProto_reflection_;
  delete CellProto::default_instance_;
  delete CellProto_reflection_;
  delete CompressedRowProto::default_instance_;
  delete CompressedRowProto_reflection_;
  delete BlockStructureProto::default_instance_;
  delete BlockStructureProto_reflection_;
  delete BlockSparseMatrixProto::default_instance_;
  delete BlockSparseMatrixProto_reflection_;
  delete TripletSparseMatrixProto::default_instance_;
  delete TripletSparseMatrixProto_reflection_;
  delete CompressedRowSparseMatrixProto::default_instance_;
  delete CompressedRowSparseMatrixProto_reflection_;
  delete DenseSparseMatrixProto::default_instance_;
  delete DenseSparseMatrixProto_reflection_;
  delete SparseMatrixProto::default_instance_;
  delete SparseMatrixProto_reflection_;
  delete LinearLeastSquaresProblemProto::default_instance_;
  delete LinearLeastSquaresProblemProto_reflection_;
}

void protobuf_AddDesc_matrix_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014matrix.proto\022\016ceres.internal\",\n\nBlockP"
    "roto\022\014\n\004size\030\001 \001(\005\022\020\n\010position\030\002 \001(\005\"/\n\t"
    "CellProto\022\020\n\010block_id\030\001 \001(\005\022\020\n\010position\030"
    "\002 \001(\005\"i\n\022CompressedRowProto\022)\n\005block\030\002 \001"
    "(\0132\032.ceres.internal.BlockProto\022(\n\005cells\030"
    "\001 \003(\0132\031.ceres.internal.CellProto\"q\n\023Bloc"
    "kStructureProto\022(\n\004cols\030\001 \003(\0132\032.ceres.in"
    "ternal.BlockProto\0220\n\004rows\030\002 \003(\0132\".ceres."
    "internal.CompressedRowProto\"\244\001\n\026BlockSpa"
    "rseMatrixProto\022\020\n\010num_rows\030\002 \001(\003\022\020\n\010num_"
    "cols\030\003 \001(\003\022\024\n\014num_nonzeros\030\004 \001(\003\022\022\n\006valu"
    "es\030\001 \003(\001B\002\020\001\022<\n\017block_structure\030\005 \001(\0132#."
    "ceres.internal.BlockStructureProto\"\214\001\n\030T"
    "ripletSparseMatrixProto\022\020\n\010num_rows\030\004 \001("
    "\003\022\020\n\010num_cols\030\005 \001(\003\022\024\n\014num_nonzeros\030\006 \001("
    "\003\022\020\n\004rows\030\001 \003(\003B\002\020\001\022\020\n\004cols\030\002 \003(\003B\002\020\001\022\022\n"
    "\006values\030\003 \003(\001B\002\020\001\"|\n\036CompressedRowSparse"
    "MatrixProto\022\020\n\010num_rows\030\004 \001(\003\022\020\n\010num_col"
    "s\030\005 \001(\003\022\020\n\004rows\030\001 \003(\003B\002\020\001\022\020\n\004cols\030\002 \003(\003B"
    "\002\020\001\022\022\n\006values\030\003 \003(\001B\002\020\001\"P\n\026DenseSparseMa"
    "trixProto\022\020\n\010num_rows\030\001 \001(\003\022\020\n\010num_cols\030"
    "\002 \001(\003\022\022\n\006values\030\003 \003(\001B\002\020\001\"\240\002\n\021SparseMatr"
    "ixProto\022@\n\016triplet_matrix\030\001 \001(\0132(.ceres."
    "internal.TripletSparseMatrixProto\022<\n\014blo"
    "ck_matrix\030\002 \001(\0132&.ceres.internal.BlockSp"
    "arseMatrixProto\022M\n\025compressed_row_matrix"
    "\030\003 \001(\0132..ceres.internal.CompressedRowSpa"
    "rseMatrixProto\022<\n\014dense_matrix\030\004 \001(\0132&.c"
    "eres.internal.DenseSparseMatrixProto\"\231\001\n"
    "\036LinearLeastSquaresProblemProto\022,\n\001a\030\001 \001"
    "(\0132!.ceres.internal.SparseMatrixProto\022\r\n"
    "\001b\030\002 \003(\001B\002\020\001\022\r\n\001d\030\003 \003(\001B\002\020\001\022\r\n\001x\030\004 \003(\001B\002"
    "\020\001\022\034\n\024num_eliminate_blocks\030\005 \001(\005", 1312);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "matrix.proto", &protobuf_RegisterTypes);
  BlockProto::default_instance_ = new BlockProto();
  CellProto::default_instance_ = new CellProto();
  CompressedRowProto::default_instance_ = new CompressedRowProto();
  BlockStructureProto::default_instance_ = new BlockStructureProto();
  BlockSparseMatrixProto::default_instance_ = new BlockSparseMatrixProto();
  TripletSparseMatrixProto::default_instance_ = new TripletSparseMatrixProto();
  CompressedRowSparseMatrixProto::default_instance_ = new CompressedRowSparseMatrixProto();
  DenseSparseMatrixProto::default_instance_ = new DenseSparseMatrixProto();
  SparseMatrixProto::default_instance_ = new SparseMatrixProto();
  LinearLeastSquaresProblemProto::default_instance_ = new LinearLeastSquaresProblemProto();
  BlockProto::default_instance_->InitAsDefaultInstance();
  CellProto::default_instance_->InitAsDefaultInstance();
  CompressedRowProto::default_instance_->InitAsDefaultInstance();
  BlockStructureProto::default_instance_->InitAsDefaultInstance();
  BlockSparseMatrixProto::default_instance_->InitAsDefaultInstance();
  TripletSparseMatrixProto::default_instance_->InitAsDefaultInstance();
  CompressedRowSparseMatrixProto::default_instance_->InitAsDefaultInstance();
  DenseSparseMatrixProto::default_instance_->InitAsDefaultInstance();
  SparseMatrixProto::default_instance_->InitAsDefaultInstance();
  LinearLeastSquaresProblemProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_matrix_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_matrix_2eproto {
  StaticDescriptorInitializer_matrix_2eproto() {
    protobuf_AddDesc_matrix_2eproto();
  }
} static_descriptor_initializer_matrix_2eproto_;


// ===================================================================

#ifndef _MSC_VER
const int BlockProto::kSizeFieldNumber;
const int BlockProto::kPositionFieldNumber;
#endif  // !_MSC_VER

BlockProto::BlockProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockProto::InitAsDefaultInstance() {
}

BlockProto::BlockProto(const BlockProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockProto::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockProto::~BlockProto() {
  SharedDtor();
}

void BlockProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockProto_descriptor_;
}

const BlockProto& BlockProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

BlockProto* BlockProto::default_instance_ = NULL;

BlockProto* BlockProto::New() const {
  return new BlockProto;
}

void BlockProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }
      
      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 size = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }
  
  // optional int32 position = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 size = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }
  
  // optional int32 position = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }
    
    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockProto::MergeFrom(const BlockProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_size(from.size());
    }
    if (from._has_bit(1)) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockProto::CopyFrom(const BlockProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockProto::IsInitialized() const {
  
  return true;
}

void BlockProto::Swap(BlockProto* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockProto_descriptor_;
  metadata.reflection = BlockProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CellProto::kBlockIdFieldNumber;
const int CellProto::kPositionFieldNumber;
#endif  // !_MSC_VER

CellProto::CellProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CellProto::InitAsDefaultInstance() {
}

CellProto::CellProto(const CellProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CellProto::SharedCtor() {
  _cached_size_ = 0;
  block_id_ = 0;
  position_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CellProto::~CellProto() {
  SharedDtor();
}

void CellProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CellProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CellProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CellProto_descriptor_;
}

const CellProto& CellProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

CellProto* CellProto::default_instance_ = NULL;

CellProto* CellProto::New() const {
  return new CellProto;
}

void CellProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    block_id_ = 0;
    position_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CellProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 block_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &block_id_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_position;
        break;
      }
      
      // optional int32 position = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_position:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &position_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CellProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 block_id = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->block_id(), output);
  }
  
  // optional int32 position = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->position(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CellProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 block_id = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->block_id(), target);
  }
  
  // optional int32 position = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->position(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CellProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 block_id = 1;
    if (has_block_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->block_id());
    }
    
    // optional int32 position = 2;
    if (has_position()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->position());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CellProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CellProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CellProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CellProto::MergeFrom(const CellProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_block_id(from.block_id());
    }
    if (from._has_bit(1)) {
      set_position(from.position());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CellProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CellProto::CopyFrom(const CellProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CellProto::IsInitialized() const {
  
  return true;
}

void CellProto::Swap(CellProto* other) {
  if (other != this) {
    std::swap(block_id_, other->block_id_);
    std::swap(position_, other->position_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CellProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CellProto_descriptor_;
  metadata.reflection = CellProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompressedRowProto::kBlockFieldNumber;
const int CompressedRowProto::kCellsFieldNumber;
#endif  // !_MSC_VER

CompressedRowProto::CompressedRowProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompressedRowProto::InitAsDefaultInstance() {
  block_ = const_cast< ::ceres::internal::BlockProto*>(&::ceres::internal::BlockProto::default_instance());
}

CompressedRowProto::CompressedRowProto(const CompressedRowProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedRowProto::SharedCtor() {
  _cached_size_ = 0;
  block_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedRowProto::~CompressedRowProto() {
  SharedDtor();
}

void CompressedRowProto::SharedDtor() {
  if (this != default_instance_) {
    delete block_;
  }
}

void CompressedRowProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedRowProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedRowProto_descriptor_;
}

const CompressedRowProto& CompressedRowProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

CompressedRowProto* CompressedRowProto::default_instance_ = NULL;

CompressedRowProto* CompressedRowProto::New() const {
  return new CompressedRowProto;
}

void CompressedRowProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (block_ != NULL) block_->::ceres::internal::BlockProto::Clear();
    }
  }
  cells_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompressedRowProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ceres.internal.CellProto cells = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cells:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cells()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cells;
        if (input->ExpectTag(18)) goto parse_block;
        break;
      }
      
      // optional .ceres.internal.BlockProto block = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedRowProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ceres.internal.CellProto cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cells(i), output);
  }
  
  // optional .ceres.internal.BlockProto block = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompressedRowProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ceres.internal.CellProto cells = 1;
  for (int i = 0; i < this->cells_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cells(i), target);
  }
  
  // optional .ceres.internal.BlockProto block = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompressedRowProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ceres.internal.BlockProto block = 2;
    if (has_block()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block());
    }
    
  }
  // repeated .ceres.internal.CellProto cells = 1;
  total_size += 1 * this->cells_size();
  for (int i = 0; i < this->cells_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cells(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedRowProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompressedRowProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompressedRowProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompressedRowProto::MergeFrom(const CompressedRowProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  cells_.MergeFrom(from.cells_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_block()->::ceres::internal::BlockProto::MergeFrom(from.block());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompressedRowProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedRowProto::CopyFrom(const CompressedRowProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedRowProto::IsInitialized() const {
  
  return true;
}

void CompressedRowProto::Swap(CompressedRowProto* other) {
  if (other != this) {
    std::swap(block_, other->block_);
    cells_.Swap(&other->cells_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompressedRowProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedRowProto_descriptor_;
  metadata.reflection = CompressedRowProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockStructureProto::kColsFieldNumber;
const int BlockStructureProto::kRowsFieldNumber;
#endif  // !_MSC_VER

BlockStructureProto::BlockStructureProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockStructureProto::InitAsDefaultInstance() {
}

BlockStructureProto::BlockStructureProto(const BlockStructureProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockStructureProto::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockStructureProto::~BlockStructureProto() {
  SharedDtor();
}

void BlockStructureProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BlockStructureProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockStructureProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockStructureProto_descriptor_;
}

const BlockStructureProto& BlockStructureProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

BlockStructureProto* BlockStructureProto::default_instance_ = NULL;

BlockStructureProto* BlockStructureProto::New() const {
  return new BlockStructureProto;
}

void BlockStructureProto::Clear() {
  cols_.Clear();
  rows_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockStructureProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ceres.internal.BlockProto cols = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cols:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cols()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cols;
        if (input->ExpectTag(18)) goto parse_rows;
        break;
      }
      
      // repeated .ceres.internal.CompressedRowProto rows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rows:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rows()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rows;
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockStructureProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ceres.internal.BlockProto cols = 1;
  for (int i = 0; i < this->cols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cols(i), output);
  }
  
  // repeated .ceres.internal.CompressedRowProto rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rows(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockStructureProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ceres.internal.BlockProto cols = 1;
  for (int i = 0; i < this->cols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cols(i), target);
  }
  
  // repeated .ceres.internal.CompressedRowProto rows = 2;
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rows(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockStructureProto::ByteSize() const {
  int total_size = 0;
  
  // repeated .ceres.internal.BlockProto cols = 1;
  total_size += 1 * this->cols_size();
  for (int i = 0; i < this->cols_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cols(i));
  }
  
  // repeated .ceres.internal.CompressedRowProto rows = 2;
  total_size += 1 * this->rows_size();
  for (int i = 0; i < this->rows_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rows(i));
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockStructureProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockStructureProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockStructureProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockStructureProto::MergeFrom(const BlockStructureProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  cols_.MergeFrom(from.cols_);
  rows_.MergeFrom(from.rows_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockStructureProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockStructureProto::CopyFrom(const BlockStructureProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockStructureProto::IsInitialized() const {
  
  return true;
}

void BlockStructureProto::Swap(BlockStructureProto* other) {
  if (other != this) {
    cols_.Swap(&other->cols_);
    rows_.Swap(&other->rows_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockStructureProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockStructureProto_descriptor_;
  metadata.reflection = BlockStructureProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlockSparseMatrixProto::kNumRowsFieldNumber;
const int BlockSparseMatrixProto::kNumColsFieldNumber;
const int BlockSparseMatrixProto::kNumNonzerosFieldNumber;
const int BlockSparseMatrixProto::kValuesFieldNumber;
const int BlockSparseMatrixProto::kBlockStructureFieldNumber;
#endif  // !_MSC_VER

BlockSparseMatrixProto::BlockSparseMatrixProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlockSparseMatrixProto::InitAsDefaultInstance() {
  block_structure_ = const_cast< ::ceres::internal::BlockStructureProto*>(&::ceres::internal::BlockStructureProto::default_instance());
}

BlockSparseMatrixProto::BlockSparseMatrixProto(const BlockSparseMatrixProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlockSparseMatrixProto::SharedCtor() {
  _cached_size_ = 0;
  num_rows_ = GOOGLE_LONGLONG(0);
  num_cols_ = GOOGLE_LONGLONG(0);
  num_nonzeros_ = GOOGLE_LONGLONG(0);
  block_structure_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlockSparseMatrixProto::~BlockSparseMatrixProto() {
  SharedDtor();
}

void BlockSparseMatrixProto::SharedDtor() {
  if (this != default_instance_) {
    delete block_structure_;
  }
}

void BlockSparseMatrixProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlockSparseMatrixProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlockSparseMatrixProto_descriptor_;
}

const BlockSparseMatrixProto& BlockSparseMatrixProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

BlockSparseMatrixProto* BlockSparseMatrixProto::default_instance_ = NULL;

BlockSparseMatrixProto* BlockSparseMatrixProto::New() const {
  return new BlockSparseMatrixProto;
}

void BlockSparseMatrixProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_rows_ = GOOGLE_LONGLONG(0);
    num_cols_ = GOOGLE_LONGLONG(0);
    num_nonzeros_ = GOOGLE_LONGLONG(0);
    if (_has_bit(4)) {
      if (block_structure_ != NULL) block_structure_->::ceres::internal::BlockStructureProto::Clear();
    }
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlockSparseMatrixProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated double values = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 10, input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_rows;
        break;
      }
      
      // optional int64 num_rows = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num_cols;
        break;
      }
      
      // optional int64 num_cols = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cols_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_nonzeros;
        break;
      }
      
      // optional int64 num_nonzeros = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_nonzeros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_nonzeros_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_block_structure;
        break;
      }
      
      // optional .ceres.internal.BlockStructureProto block_structure = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_structure:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_structure()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlockSparseMatrixProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated double values = 1 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->values(i), output);
  }
  
  // optional int64 num_rows = 2;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_rows(), output);
  }
  
  // optional int64 num_cols = 3;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->num_cols(), output);
  }
  
  // optional int64 num_nonzeros = 4;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_nonzeros(), output);
  }
  
  // optional .ceres.internal.BlockStructureProto block_structure = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->block_structure(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlockSparseMatrixProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated double values = 1 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values(i), target);
  }
  
  // optional int64 num_rows = 2;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_rows(), target);
  }
  
  // optional int64 num_cols = 3;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->num_cols(), target);
  }
  
  // optional int64 num_nonzeros = 4;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_nonzeros(), target);
  }
  
  // optional .ceres.internal.BlockStructureProto block_structure = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->block_structure(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlockSparseMatrixProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 num_rows = 2;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_rows());
    }
    
    // optional int64 num_cols = 3;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_cols());
    }
    
    // optional int64 num_nonzeros = 4;
    if (has_num_nonzeros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_nonzeros());
    }
    
    // optional .ceres.internal.BlockStructureProto block_structure = 5;
    if (has_block_structure()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_structure());
    }
    
  }
  // repeated double values = 1 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _values_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlockSparseMatrixProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlockSparseMatrixProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlockSparseMatrixProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlockSparseMatrixProto::MergeFrom(const BlockSparseMatrixProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_rows(from.num_rows());
    }
    if (from._has_bit(1)) {
      set_num_cols(from.num_cols());
    }
    if (from._has_bit(2)) {
      set_num_nonzeros(from.num_nonzeros());
    }
    if (from._has_bit(4)) {
      mutable_block_structure()->::ceres::internal::BlockStructureProto::MergeFrom(from.block_structure());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlockSparseMatrixProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlockSparseMatrixProto::CopyFrom(const BlockSparseMatrixProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlockSparseMatrixProto::IsInitialized() const {
  
  return true;
}

void BlockSparseMatrixProto::Swap(BlockSparseMatrixProto* other) {
  if (other != this) {
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    std::swap(num_nonzeros_, other->num_nonzeros_);
    values_.Swap(&other->values_);
    std::swap(block_structure_, other->block_structure_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlockSparseMatrixProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlockSparseMatrixProto_descriptor_;
  metadata.reflection = BlockSparseMatrixProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TripletSparseMatrixProto::kNumRowsFieldNumber;
const int TripletSparseMatrixProto::kNumColsFieldNumber;
const int TripletSparseMatrixProto::kNumNonzerosFieldNumber;
const int TripletSparseMatrixProto::kRowsFieldNumber;
const int TripletSparseMatrixProto::kColsFieldNumber;
const int TripletSparseMatrixProto::kValuesFieldNumber;
#endif  // !_MSC_VER

TripletSparseMatrixProto::TripletSparseMatrixProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TripletSparseMatrixProto::InitAsDefaultInstance() {
}

TripletSparseMatrixProto::TripletSparseMatrixProto(const TripletSparseMatrixProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TripletSparseMatrixProto::SharedCtor() {
  _cached_size_ = 0;
  num_rows_ = GOOGLE_LONGLONG(0);
  num_cols_ = GOOGLE_LONGLONG(0);
  num_nonzeros_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TripletSparseMatrixProto::~TripletSparseMatrixProto() {
  SharedDtor();
}

void TripletSparseMatrixProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TripletSparseMatrixProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TripletSparseMatrixProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TripletSparseMatrixProto_descriptor_;
}

const TripletSparseMatrixProto& TripletSparseMatrixProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

TripletSparseMatrixProto* TripletSparseMatrixProto::default_instance_ = NULL;

TripletSparseMatrixProto* TripletSparseMatrixProto::New() const {
  return new TripletSparseMatrixProto;
}

void TripletSparseMatrixProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_rows_ = GOOGLE_LONGLONG(0);
    num_cols_ = GOOGLE_LONGLONG(0);
    num_nonzeros_ = GOOGLE_LONGLONG(0);
  }
  rows_.Clear();
  cols_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TripletSparseMatrixProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 rows = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_rows())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_rows())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cols;
        break;
      }
      
      // repeated int64 cols = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cols())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_cols())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }
      
      // repeated double values = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_rows;
        break;
      }
      
      // optional int64 num_rows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_cols;
        break;
      }
      
      // optional int64 num_cols = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cols_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num_nonzeros;
        break;
      }
      
      // optional int64 num_nonzeros = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_nonzeros:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_nonzeros_)));
          _set_bit(2);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TripletSparseMatrixProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 rows = 1 [packed = true];
  if (this->rows_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rows_cached_byte_size_);
  }
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->rows(i), output);
  }
  
  // repeated int64 cols = 2 [packed = true];
  if (this->cols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cols_cached_byte_size_);
  }
  for (int i = 0; i < this->cols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->cols(i), output);
  }
  
  // repeated double values = 3 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->values(i), output);
  }
  
  // optional int64 num_rows = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_rows(), output);
  }
  
  // optional int64 num_cols = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num_cols(), output);
  }
  
  // optional int64 num_nonzeros = 6;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->num_nonzeros(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TripletSparseMatrixProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 rows = 1 [packed = true];
  if (this->rows_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rows_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->rows(i), target);
  }
  
  // repeated int64 cols = 2 [packed = true];
  if (this->cols_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cols_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->cols(i), target);
  }
  
  // repeated double values = 3 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values(i), target);
  }
  
  // optional int64 num_rows = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_rows(), target);
  }
  
  // optional int64 num_cols = 5;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->num_cols(), target);
  }
  
  // optional int64 num_nonzeros = 6;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->num_nonzeros(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TripletSparseMatrixProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 num_rows = 4;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_rows());
    }
    
    // optional int64 num_cols = 5;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_cols());
    }
    
    // optional int64 num_nonzeros = 6;
    if (has_num_nonzeros()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_nonzeros());
    }
    
  }
  // repeated int64 rows = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->rows_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->rows(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _rows_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int64 cols = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->cols_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cols(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _cols_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated double values = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _values_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TripletSparseMatrixProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TripletSparseMatrixProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TripletSparseMatrixProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TripletSparseMatrixProto::MergeFrom(const TripletSparseMatrixProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  cols_.MergeFrom(from.cols_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_rows(from.num_rows());
    }
    if (from._has_bit(1)) {
      set_num_cols(from.num_cols());
    }
    if (from._has_bit(2)) {
      set_num_nonzeros(from.num_nonzeros());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TripletSparseMatrixProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TripletSparseMatrixProto::CopyFrom(const TripletSparseMatrixProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TripletSparseMatrixProto::IsInitialized() const {
  
  return true;
}

void TripletSparseMatrixProto::Swap(TripletSparseMatrixProto* other) {
  if (other != this) {
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    std::swap(num_nonzeros_, other->num_nonzeros_);
    rows_.Swap(&other->rows_);
    cols_.Swap(&other->cols_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TripletSparseMatrixProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TripletSparseMatrixProto_descriptor_;
  metadata.reflection = TripletSparseMatrixProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CompressedRowSparseMatrixProto::kNumRowsFieldNumber;
const int CompressedRowSparseMatrixProto::kNumColsFieldNumber;
const int CompressedRowSparseMatrixProto::kRowsFieldNumber;
const int CompressedRowSparseMatrixProto::kColsFieldNumber;
const int CompressedRowSparseMatrixProto::kValuesFieldNumber;
#endif  // !_MSC_VER

CompressedRowSparseMatrixProto::CompressedRowSparseMatrixProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CompressedRowSparseMatrixProto::InitAsDefaultInstance() {
}

CompressedRowSparseMatrixProto::CompressedRowSparseMatrixProto(const CompressedRowSparseMatrixProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CompressedRowSparseMatrixProto::SharedCtor() {
  _cached_size_ = 0;
  num_rows_ = GOOGLE_LONGLONG(0);
  num_cols_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CompressedRowSparseMatrixProto::~CompressedRowSparseMatrixProto() {
  SharedDtor();
}

void CompressedRowSparseMatrixProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CompressedRowSparseMatrixProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CompressedRowSparseMatrixProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CompressedRowSparseMatrixProto_descriptor_;
}

const CompressedRowSparseMatrixProto& CompressedRowSparseMatrixProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

CompressedRowSparseMatrixProto* CompressedRowSparseMatrixProto::default_instance_ = NULL;

CompressedRowSparseMatrixProto* CompressedRowSparseMatrixProto::New() const {
  return new CompressedRowSparseMatrixProto;
}

void CompressedRowSparseMatrixProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_rows_ = GOOGLE_LONGLONG(0);
    num_cols_ = GOOGLE_LONGLONG(0);
  }
  rows_.Clear();
  cols_.Clear();
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CompressedRowSparseMatrixProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 rows = 1 [packed = true];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_rows())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 10, input, this->mutable_rows())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_cols;
        break;
      }
      
      // repeated int64 cols = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_cols())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 18, input, this->mutable_cols())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }
      
      // repeated double values = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_rows;
        break;
      }
      
      // optional int64 num_rows = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_rows:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_cols;
        break;
      }
      
      // optional int64 num_cols = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cols_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CompressedRowSparseMatrixProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 rows = 1 [packed = true];
  if (this->rows_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(1, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_rows_cached_byte_size_);
  }
  for (int i = 0; i < this->rows_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->rows(i), output);
  }
  
  // repeated int64 cols = 2 [packed = true];
  if (this->cols_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_cols_cached_byte_size_);
  }
  for (int i = 0; i < this->cols_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->cols(i), output);
  }
  
  // repeated double values = 3 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->values(i), output);
  }
  
  // optional int64 num_rows = 4;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_rows(), output);
  }
  
  // optional int64 num_cols = 5;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num_cols(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CompressedRowSparseMatrixProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 rows = 1 [packed = true];
  if (this->rows_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      1,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _rows_cached_byte_size_, target);
  }
  for (int i = 0; i < this->rows_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->rows(i), target);
  }
  
  // repeated int64 cols = 2 [packed = true];
  if (this->cols_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _cols_cached_byte_size_, target);
  }
  for (int i = 0; i < this->cols_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->cols(i), target);
  }
  
  // repeated double values = 3 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values(i), target);
  }
  
  // optional int64 num_rows = 4;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_rows(), target);
  }
  
  // optional int64 num_cols = 5;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->num_cols(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CompressedRowSparseMatrixProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 num_rows = 4;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_rows());
    }
    
    // optional int64 num_cols = 5;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_cols());
    }
    
  }
  // repeated int64 rows = 1 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->rows_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->rows(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _rows_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated int64 cols = 2 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->cols_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->cols(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _cols_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated double values = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _values_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CompressedRowSparseMatrixProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CompressedRowSparseMatrixProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CompressedRowSparseMatrixProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CompressedRowSparseMatrixProto::MergeFrom(const CompressedRowSparseMatrixProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  rows_.MergeFrom(from.rows_);
  cols_.MergeFrom(from.cols_);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_rows(from.num_rows());
    }
    if (from._has_bit(1)) {
      set_num_cols(from.num_cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CompressedRowSparseMatrixProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CompressedRowSparseMatrixProto::CopyFrom(const CompressedRowSparseMatrixProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CompressedRowSparseMatrixProto::IsInitialized() const {
  
  return true;
}

void CompressedRowSparseMatrixProto::Swap(CompressedRowSparseMatrixProto* other) {
  if (other != this) {
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    rows_.Swap(&other->rows_);
    cols_.Swap(&other->cols_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CompressedRowSparseMatrixProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CompressedRowSparseMatrixProto_descriptor_;
  metadata.reflection = CompressedRowSparseMatrixProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DenseSparseMatrixProto::kNumRowsFieldNumber;
const int DenseSparseMatrixProto::kNumColsFieldNumber;
const int DenseSparseMatrixProto::kValuesFieldNumber;
#endif  // !_MSC_VER

DenseSparseMatrixProto::DenseSparseMatrixProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DenseSparseMatrixProto::InitAsDefaultInstance() {
}

DenseSparseMatrixProto::DenseSparseMatrixProto(const DenseSparseMatrixProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DenseSparseMatrixProto::SharedCtor() {
  _cached_size_ = 0;
  num_rows_ = GOOGLE_LONGLONG(0);
  num_cols_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DenseSparseMatrixProto::~DenseSparseMatrixProto() {
  SharedDtor();
}

void DenseSparseMatrixProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DenseSparseMatrixProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DenseSparseMatrixProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DenseSparseMatrixProto_descriptor_;
}

const DenseSparseMatrixProto& DenseSparseMatrixProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

DenseSparseMatrixProto* DenseSparseMatrixProto::default_instance_ = NULL;

DenseSparseMatrixProto* DenseSparseMatrixProto::New() const {
  return new DenseSparseMatrixProto;
}

void DenseSparseMatrixProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_rows_ = GOOGLE_LONGLONG(0);
    num_cols_ = GOOGLE_LONGLONG(0);
  }
  values_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DenseSparseMatrixProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 num_rows = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_rows_)));
          _set_bit(0);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num_cols;
        break;
      }
      
      // optional int64 num_cols = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_cols:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_cols_)));
          _set_bit(1);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_values;
        break;
      }
      
      // repeated double values = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_values:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_values())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_values())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DenseSparseMatrixProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 num_rows = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->num_rows(), output);
  }
  
  // optional int64 num_cols = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->num_cols(), output);
  }
  
  // repeated double values = 3 [packed = true];
  if (this->values_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_values_cached_byte_size_);
  }
  for (int i = 0; i < this->values_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->values(i), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DenseSparseMatrixProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 num_rows = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->num_rows(), target);
  }
  
  // optional int64 num_cols = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->num_cols(), target);
  }
  
  // repeated double values = 3 [packed = true];
  if (this->values_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _values_cached_byte_size_, target);
  }
  for (int i = 0; i < this->values_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->values(i), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DenseSparseMatrixProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 num_rows = 1;
    if (has_num_rows()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_rows());
    }
    
    // optional int64 num_cols = 2;
    if (has_num_cols()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_cols());
    }
    
  }
  // repeated double values = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->values_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _values_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DenseSparseMatrixProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DenseSparseMatrixProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DenseSparseMatrixProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DenseSparseMatrixProto::MergeFrom(const DenseSparseMatrixProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  values_.MergeFrom(from.values_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      set_num_rows(from.num_rows());
    }
    if (from._has_bit(1)) {
      set_num_cols(from.num_cols());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DenseSparseMatrixProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DenseSparseMatrixProto::CopyFrom(const DenseSparseMatrixProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DenseSparseMatrixProto::IsInitialized() const {
  
  return true;
}

void DenseSparseMatrixProto::Swap(DenseSparseMatrixProto* other) {
  if (other != this) {
    std::swap(num_rows_, other->num_rows_);
    std::swap(num_cols_, other->num_cols_);
    values_.Swap(&other->values_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DenseSparseMatrixProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DenseSparseMatrixProto_descriptor_;
  metadata.reflection = DenseSparseMatrixProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SparseMatrixProto::kTripletMatrixFieldNumber;
const int SparseMatrixProto::kBlockMatrixFieldNumber;
const int SparseMatrixProto::kCompressedRowMatrixFieldNumber;
const int SparseMatrixProto::kDenseMatrixFieldNumber;
#endif  // !_MSC_VER

SparseMatrixProto::SparseMatrixProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SparseMatrixProto::InitAsDefaultInstance() {
  triplet_matrix_ = const_cast< ::ceres::internal::TripletSparseMatrixProto*>(&::ceres::internal::TripletSparseMatrixProto::default_instance());
  block_matrix_ = const_cast< ::ceres::internal::BlockSparseMatrixProto*>(&::ceres::internal::BlockSparseMatrixProto::default_instance());
  compressed_row_matrix_ = const_cast< ::ceres::internal::CompressedRowSparseMatrixProto*>(&::ceres::internal::CompressedRowSparseMatrixProto::default_instance());
  dense_matrix_ = const_cast< ::ceres::internal::DenseSparseMatrixProto*>(&::ceres::internal::DenseSparseMatrixProto::default_instance());
}

SparseMatrixProto::SparseMatrixProto(const SparseMatrixProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SparseMatrixProto::SharedCtor() {
  _cached_size_ = 0;
  triplet_matrix_ = NULL;
  block_matrix_ = NULL;
  compressed_row_matrix_ = NULL;
  dense_matrix_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SparseMatrixProto::~SparseMatrixProto() {
  SharedDtor();
}

void SparseMatrixProto::SharedDtor() {
  if (this != default_instance_) {
    delete triplet_matrix_;
    delete block_matrix_;
    delete compressed_row_matrix_;
    delete dense_matrix_;
  }
}

void SparseMatrixProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SparseMatrixProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SparseMatrixProto_descriptor_;
}

const SparseMatrixProto& SparseMatrixProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

SparseMatrixProto* SparseMatrixProto::default_instance_ = NULL;

SparseMatrixProto* SparseMatrixProto::New() const {
  return new SparseMatrixProto;
}

void SparseMatrixProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (triplet_matrix_ != NULL) triplet_matrix_->::ceres::internal::TripletSparseMatrixProto::Clear();
    }
    if (_has_bit(1)) {
      if (block_matrix_ != NULL) block_matrix_->::ceres::internal::BlockSparseMatrixProto::Clear();
    }
    if (_has_bit(2)) {
      if (compressed_row_matrix_ != NULL) compressed_row_matrix_->::ceres::internal::CompressedRowSparseMatrixProto::Clear();
    }
    if (_has_bit(3)) {
      if (dense_matrix_ != NULL) dense_matrix_->::ceres::internal::DenseSparseMatrixProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SparseMatrixProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ceres.internal.TripletSparseMatrixProto triplet_matrix = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_triplet_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_block_matrix;
        break;
      }
      
      // optional .ceres.internal.BlockSparseMatrixProto block_matrix = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_block_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_block_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_compressed_row_matrix;
        break;
      }
      
      // optional .ceres.internal.CompressedRowSparseMatrixProto compressed_row_matrix = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_compressed_row_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_compressed_row_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_dense_matrix;
        break;
      }
      
      // optional .ceres.internal.DenseSparseMatrixProto dense_matrix = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dense_matrix:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_dense_matrix()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SparseMatrixProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ceres.internal.TripletSparseMatrixProto triplet_matrix = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->triplet_matrix(), output);
  }
  
  // optional .ceres.internal.BlockSparseMatrixProto block_matrix = 2;
  if (_has_bit(1)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->block_matrix(), output);
  }
  
  // optional .ceres.internal.CompressedRowSparseMatrixProto compressed_row_matrix = 3;
  if (_has_bit(2)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->compressed_row_matrix(), output);
  }
  
  // optional .ceres.internal.DenseSparseMatrixProto dense_matrix = 4;
  if (_has_bit(3)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->dense_matrix(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SparseMatrixProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ceres.internal.TripletSparseMatrixProto triplet_matrix = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->triplet_matrix(), target);
  }
  
  // optional .ceres.internal.BlockSparseMatrixProto block_matrix = 2;
  if (_has_bit(1)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->block_matrix(), target);
  }
  
  // optional .ceres.internal.CompressedRowSparseMatrixProto compressed_row_matrix = 3;
  if (_has_bit(2)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->compressed_row_matrix(), target);
  }
  
  // optional .ceres.internal.DenseSparseMatrixProto dense_matrix = 4;
  if (_has_bit(3)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->dense_matrix(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SparseMatrixProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ceres.internal.TripletSparseMatrixProto triplet_matrix = 1;
    if (has_triplet_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->triplet_matrix());
    }
    
    // optional .ceres.internal.BlockSparseMatrixProto block_matrix = 2;
    if (has_block_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->block_matrix());
    }
    
    // optional .ceres.internal.CompressedRowSparseMatrixProto compressed_row_matrix = 3;
    if (has_compressed_row_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->compressed_row_matrix());
    }
    
    // optional .ceres.internal.DenseSparseMatrixProto dense_matrix = 4;
    if (has_dense_matrix()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->dense_matrix());
    }
    
  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SparseMatrixProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SparseMatrixProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SparseMatrixProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SparseMatrixProto::MergeFrom(const SparseMatrixProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_triplet_matrix()->::ceres::internal::TripletSparseMatrixProto::MergeFrom(from.triplet_matrix());
    }
    if (from._has_bit(1)) {
      mutable_block_matrix()->::ceres::internal::BlockSparseMatrixProto::MergeFrom(from.block_matrix());
    }
    if (from._has_bit(2)) {
      mutable_compressed_row_matrix()->::ceres::internal::CompressedRowSparseMatrixProto::MergeFrom(from.compressed_row_matrix());
    }
    if (from._has_bit(3)) {
      mutable_dense_matrix()->::ceres::internal::DenseSparseMatrixProto::MergeFrom(from.dense_matrix());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SparseMatrixProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SparseMatrixProto::CopyFrom(const SparseMatrixProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SparseMatrixProto::IsInitialized() const {
  
  return true;
}

void SparseMatrixProto::Swap(SparseMatrixProto* other) {
  if (other != this) {
    std::swap(triplet_matrix_, other->triplet_matrix_);
    std::swap(block_matrix_, other->block_matrix_);
    std::swap(compressed_row_matrix_, other->compressed_row_matrix_);
    std::swap(dense_matrix_, other->dense_matrix_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SparseMatrixProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SparseMatrixProto_descriptor_;
  metadata.reflection = SparseMatrixProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LinearLeastSquaresProblemProto::kAFieldNumber;
const int LinearLeastSquaresProblemProto::kBFieldNumber;
const int LinearLeastSquaresProblemProto::kDFieldNumber;
const int LinearLeastSquaresProblemProto::kXFieldNumber;
const int LinearLeastSquaresProblemProto::kNumEliminateBlocksFieldNumber;
#endif  // !_MSC_VER

LinearLeastSquaresProblemProto::LinearLeastSquaresProblemProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LinearLeastSquaresProblemProto::InitAsDefaultInstance() {
  a_ = const_cast< ::ceres::internal::SparseMatrixProto*>(&::ceres::internal::SparseMatrixProto::default_instance());
}

LinearLeastSquaresProblemProto::LinearLeastSquaresProblemProto(const LinearLeastSquaresProblemProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LinearLeastSquaresProblemProto::SharedCtor() {
  _cached_size_ = 0;
  a_ = NULL;
  num_eliminate_blocks_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LinearLeastSquaresProblemProto::~LinearLeastSquaresProblemProto() {
  SharedDtor();
}

void LinearLeastSquaresProblemProto::SharedDtor() {
  if (this != default_instance_) {
    delete a_;
  }
}

void LinearLeastSquaresProblemProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LinearLeastSquaresProblemProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LinearLeastSquaresProblemProto_descriptor_;
}

const LinearLeastSquaresProblemProto& LinearLeastSquaresProblemProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_matrix_2eproto();  return *default_instance_;
}

LinearLeastSquaresProblemProto* LinearLeastSquaresProblemProto::default_instance_ = NULL;

LinearLeastSquaresProblemProto* LinearLeastSquaresProblemProto::New() const {
  return new LinearLeastSquaresProblemProto;
}

void LinearLeastSquaresProblemProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (_has_bit(0)) {
      if (a_ != NULL) a_->::ceres::internal::SparseMatrixProto::Clear();
    }
    num_eliminate_blocks_ = 0;
  }
  b_.Clear();
  d_.Clear();
  x_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LinearLeastSquaresProblemProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ceres.internal.SparseMatrixProto a = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_a()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_b;
        break;
      }
      
      // repeated double b = 2 [packed = true];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_b:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_b())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 18, input, this->mutable_b())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_d;
        break;
      }
      
      // repeated double d = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_d:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_d())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 26, input, this->mutable_d())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_x;
        break;
      }
      
      // repeated double x = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_x:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_x())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 34, input, this->mutable_x())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num_eliminate_blocks;
        break;
      }
      
      // optional int32 num_eliminate_blocks = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_eliminate_blocks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_eliminate_blocks_)));
          _set_bit(4);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }
      
      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LinearLeastSquaresProblemProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ceres.internal.SparseMatrixProto a = 1;
  if (_has_bit(0)) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->a(), output);
  }
  
  // repeated double b = 2 [packed = true];
  if (this->b_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_b_cached_byte_size_);
  }
  for (int i = 0; i < this->b_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->b(i), output);
  }
  
  // repeated double d = 3 [packed = true];
  if (this->d_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_d_cached_byte_size_);
  }
  for (int i = 0; i < this->d_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->d(i), output);
  }
  
  // repeated double x = 4 [packed = true];
  if (this->x_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_x_cached_byte_size_);
  }
  for (int i = 0; i < this->x_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->x(i), output);
  }
  
  // optional int32 num_eliminate_blocks = 5;
  if (_has_bit(4)) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->num_eliminate_blocks(), output);
  }
  
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LinearLeastSquaresProblemProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ceres.internal.SparseMatrixProto a = 1;
  if (_has_bit(0)) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->a(), target);
  }
  
  // repeated double b = 2 [packed = true];
  if (this->b_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _b_cached_byte_size_, target);
  }
  for (int i = 0; i < this->b_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->b(i), target);
  }
  
  // repeated double d = 3 [packed = true];
  if (this->d_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _d_cached_byte_size_, target);
  }
  for (int i = 0; i < this->d_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->d(i), target);
  }
  
  // repeated double x = 4 [packed = true];
  if (this->x_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _x_cached_byte_size_, target);
  }
  for (int i = 0; i < this->x_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->x(i), target);
  }
  
  // optional int32 num_eliminate_blocks = 5;
  if (_has_bit(4)) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->num_eliminate_blocks(), target);
  }
  
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LinearLeastSquaresProblemProto::ByteSize() const {
  int total_size = 0;
  
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ceres.internal.SparseMatrixProto a = 1;
    if (has_a()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->a());
    }
    
    // optional int32 num_eliminate_blocks = 5;
    if (has_num_eliminate_blocks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_eliminate_blocks());
    }
    
  }
  // repeated double b = 2 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->b_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _b_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated double d = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->d_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _d_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  // repeated double x = 4 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->x_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    _x_cached_byte_size_ = data_size;
    total_size += data_size;
  }
  
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LinearLeastSquaresProblemProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LinearLeastSquaresProblemProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LinearLeastSquaresProblemProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LinearLeastSquaresProblemProto::MergeFrom(const LinearLeastSquaresProblemProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  b_.MergeFrom(from.b_);
  d_.MergeFrom(from.d_);
  x_.MergeFrom(from.x_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from._has_bit(0)) {
      mutable_a()->::ceres::internal::SparseMatrixProto::MergeFrom(from.a());
    }
    if (from._has_bit(4)) {
      set_num_eliminate_blocks(from.num_eliminate_blocks());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LinearLeastSquaresProblemProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LinearLeastSquaresProblemProto::CopyFrom(const LinearLeastSquaresProblemProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LinearLeastSquaresProblemProto::IsInitialized() const {
  
  return true;
}

void LinearLeastSquaresProblemProto::Swap(LinearLeastSquaresProblemProto* other) {
  if (other != this) {
    std::swap(a_, other->a_);
    b_.Swap(&other->b_);
    d_.Swap(&other->d_);
    x_.Swap(&other->x_);
    std::swap(num_eliminate_blocks_, other->num_eliminate_blocks_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LinearLeastSquaresProblemProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LinearLeastSquaresProblemProto_descriptor_;
  metadata.reflection = LinearLeastSquaresProblemProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace ceres

// @@protoc_insertion_point(global_scope)
