// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: matrix.proto

#ifndef PROTOBUF_matrix_2eproto__INCLUDED
#define PROTOBUF_matrix_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2003000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2003000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/generated_message_reflection.h>
// @@protoc_insertion_point(includes)

namespace ceres {
namespace internal {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_matrix_2eproto();
void protobuf_AssignDesc_matrix_2eproto();
void protobuf_ShutdownFile_matrix_2eproto();

class BlockProto;
class CellProto;
class CompressedRowProto;
class BlockStructureProto;
class BlockSparseMatrixProto;
class TripletSparseMatrixProto;
class CompressedRowSparseMatrixProto;
class DenseSparseMatrixProto;
class SparseMatrixProto;
class LinearLeastSquaresProblemProto;

// ===================================================================

class BlockProto : public ::google::protobuf::Message {
 public:
  BlockProto();
  virtual ~BlockProto();
  
  BlockProto(const BlockProto& from);
  
  inline BlockProto& operator=(const BlockProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockProto& default_instance();
  
  void Swap(BlockProto* other);
  
  // implements Message ----------------------------------------------
  
  BlockProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockProto& from);
  void MergeFrom(const BlockProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 size = 1;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 1;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);
  
  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ceres.internal.BlockProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 size_;
  ::google::protobuf::int32 position_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockProto* default_instance_;
};
// -------------------------------------------------------------------

class CellProto : public ::google::protobuf::Message {
 public:
  CellProto();
  virtual ~CellProto();
  
  CellProto(const CellProto& from);
  
  inline CellProto& operator=(const CellProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CellProto& default_instance();
  
  void Swap(CellProto* other);
  
  // implements Message ----------------------------------------------
  
  CellProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CellProto& from);
  void MergeFrom(const CellProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int32 block_id = 1;
  inline bool has_block_id() const;
  inline void clear_block_id();
  static const int kBlockIdFieldNumber = 1;
  inline ::google::protobuf::int32 block_id() const;
  inline void set_block_id(::google::protobuf::int32 value);
  
  // optional int32 position = 2;
  inline bool has_position() const;
  inline void clear_position();
  static const int kPositionFieldNumber = 2;
  inline ::google::protobuf::int32 position() const;
  inline void set_position(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ceres.internal.CellProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int32 block_id_;
  ::google::protobuf::int32 position_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CellProto* default_instance_;
};
// -------------------------------------------------------------------

class CompressedRowProto : public ::google::protobuf::Message {
 public:
  CompressedRowProto();
  virtual ~CompressedRowProto();
  
  CompressedRowProto(const CompressedRowProto& from);
  
  inline CompressedRowProto& operator=(const CompressedRowProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedRowProto& default_instance();
  
  void Swap(CompressedRowProto* other);
  
  // implements Message ----------------------------------------------
  
  CompressedRowProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompressedRowProto& from);
  void MergeFrom(const CompressedRowProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ceres.internal.BlockProto block = 2;
  inline bool has_block() const;
  inline void clear_block();
  static const int kBlockFieldNumber = 2;
  inline const ::ceres::internal::BlockProto& block() const;
  inline ::ceres::internal::BlockProto* mutable_block();
  
  // repeated .ceres.internal.CellProto cells = 1;
  inline int cells_size() const;
  inline void clear_cells();
  static const int kCellsFieldNumber = 1;
  inline const ::ceres::internal::CellProto& cells(int index) const;
  inline ::ceres::internal::CellProto* mutable_cells(int index);
  inline ::ceres::internal::CellProto* add_cells();
  inline const ::google::protobuf::RepeatedPtrField< ::ceres::internal::CellProto >&
      cells() const;
  inline ::google::protobuf::RepeatedPtrField< ::ceres::internal::CellProto >*
      mutable_cells();
  
  // @@protoc_insertion_point(class_scope:ceres.internal.CompressedRowProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ceres::internal::BlockProto* block_;
  ::google::protobuf::RepeatedPtrField< ::ceres::internal::CellProto > cells_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CompressedRowProto* default_instance_;
};
// -------------------------------------------------------------------

class BlockStructureProto : public ::google::protobuf::Message {
 public:
  BlockStructureProto();
  virtual ~BlockStructureProto();
  
  BlockStructureProto(const BlockStructureProto& from);
  
  inline BlockStructureProto& operator=(const BlockStructureProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockStructureProto& default_instance();
  
  void Swap(BlockStructureProto* other);
  
  // implements Message ----------------------------------------------
  
  BlockStructureProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockStructureProto& from);
  void MergeFrom(const BlockStructureProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // repeated .ceres.internal.BlockProto cols = 1;
  inline int cols_size() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 1;
  inline const ::ceres::internal::BlockProto& cols(int index) const;
  inline ::ceres::internal::BlockProto* mutable_cols(int index);
  inline ::ceres::internal::BlockProto* add_cols();
  inline const ::google::protobuf::RepeatedPtrField< ::ceres::internal::BlockProto >&
      cols() const;
  inline ::google::protobuf::RepeatedPtrField< ::ceres::internal::BlockProto >*
      mutable_cols();
  
  // repeated .ceres.internal.CompressedRowProto rows = 2;
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 2;
  inline const ::ceres::internal::CompressedRowProto& rows(int index) const;
  inline ::ceres::internal::CompressedRowProto* mutable_rows(int index);
  inline ::ceres::internal::CompressedRowProto* add_rows();
  inline const ::google::protobuf::RepeatedPtrField< ::ceres::internal::CompressedRowProto >&
      rows() const;
  inline ::google::protobuf::RepeatedPtrField< ::ceres::internal::CompressedRowProto >*
      mutable_rows();
  
  // @@protoc_insertion_point(class_scope:ceres.internal.BlockStructureProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::RepeatedPtrField< ::ceres::internal::BlockProto > cols_;
  ::google::protobuf::RepeatedPtrField< ::ceres::internal::CompressedRowProto > rows_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockStructureProto* default_instance_;
};
// -------------------------------------------------------------------

class BlockSparseMatrixProto : public ::google::protobuf::Message {
 public:
  BlockSparseMatrixProto();
  virtual ~BlockSparseMatrixProto();
  
  BlockSparseMatrixProto(const BlockSparseMatrixProto& from);
  
  inline BlockSparseMatrixProto& operator=(const BlockSparseMatrixProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const BlockSparseMatrixProto& default_instance();
  
  void Swap(BlockSparseMatrixProto* other);
  
  // implements Message ----------------------------------------------
  
  BlockSparseMatrixProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BlockSparseMatrixProto& from);
  void MergeFrom(const BlockSparseMatrixProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 num_rows = 2;
  inline bool has_num_rows() const;
  inline void clear_num_rows();
  static const int kNumRowsFieldNumber = 2;
  inline ::google::protobuf::int64 num_rows() const;
  inline void set_num_rows(::google::protobuf::int64 value);
  
  // optional int64 num_cols = 3;
  inline bool has_num_cols() const;
  inline void clear_num_cols();
  static const int kNumColsFieldNumber = 3;
  inline ::google::protobuf::int64 num_cols() const;
  inline void set_num_cols(::google::protobuf::int64 value);
  
  // optional int64 num_nonzeros = 4;
  inline bool has_num_nonzeros() const;
  inline void clear_num_nonzeros();
  static const int kNumNonzerosFieldNumber = 4;
  inline ::google::protobuf::int64 num_nonzeros() const;
  inline void set_num_nonzeros(::google::protobuf::int64 value);
  
  // repeated double values = 1 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 1;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();
  
  // optional .ceres.internal.BlockStructureProto block_structure = 5;
  inline bool has_block_structure() const;
  inline void clear_block_structure();
  static const int kBlockStructureFieldNumber = 5;
  inline const ::ceres::internal::BlockStructureProto& block_structure() const;
  inline ::ceres::internal::BlockStructureProto* mutable_block_structure();
  
  // @@protoc_insertion_point(class_scope:ceres.internal.BlockSparseMatrixProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 num_rows_;
  ::google::protobuf::int64 num_cols_;
  ::google::protobuf::int64 num_nonzeros_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  ::ceres::internal::BlockStructureProto* block_structure_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static BlockSparseMatrixProto* default_instance_;
};
// -------------------------------------------------------------------

class TripletSparseMatrixProto : public ::google::protobuf::Message {
 public:
  TripletSparseMatrixProto();
  virtual ~TripletSparseMatrixProto();
  
  TripletSparseMatrixProto(const TripletSparseMatrixProto& from);
  
  inline TripletSparseMatrixProto& operator=(const TripletSparseMatrixProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const TripletSparseMatrixProto& default_instance();
  
  void Swap(TripletSparseMatrixProto* other);
  
  // implements Message ----------------------------------------------
  
  TripletSparseMatrixProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TripletSparseMatrixProto& from);
  void MergeFrom(const TripletSparseMatrixProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 num_rows = 4;
  inline bool has_num_rows() const;
  inline void clear_num_rows();
  static const int kNumRowsFieldNumber = 4;
  inline ::google::protobuf::int64 num_rows() const;
  inline void set_num_rows(::google::protobuf::int64 value);
  
  // optional int64 num_cols = 5;
  inline bool has_num_cols() const;
  inline void clear_num_cols();
  static const int kNumColsFieldNumber = 5;
  inline ::google::protobuf::int64 num_cols() const;
  inline void set_num_cols(::google::protobuf::int64 value);
  
  // optional int64 num_nonzeros = 6;
  inline bool has_num_nonzeros() const;
  inline void clear_num_nonzeros();
  static const int kNumNonzerosFieldNumber = 6;
  inline ::google::protobuf::int64 num_nonzeros() const;
  inline void set_num_nonzeros(::google::protobuf::int64 value);
  
  // repeated int64 rows = 1 [packed = true];
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline ::google::protobuf::int64 rows(int index) const;
  inline void set_rows(int index, ::google::protobuf::int64 value);
  inline void add_rows(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rows() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rows();
  
  // repeated int64 cols = 2 [packed = true];
  inline int cols_size() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 2;
  inline ::google::protobuf::int64 cols(int index) const;
  inline void set_cols(int index, ::google::protobuf::int64 value);
  inline void add_cols(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      cols() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_cols();
  
  // repeated double values = 3 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 3;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();
  
  // @@protoc_insertion_point(class_scope:ceres.internal.TripletSparseMatrixProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 num_rows_;
  ::google::protobuf::int64 num_cols_;
  ::google::protobuf::int64 num_nonzeros_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rows_;
  mutable int _rows_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > cols_;
  mutable int _cols_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static TripletSparseMatrixProto* default_instance_;
};
// -------------------------------------------------------------------

class CompressedRowSparseMatrixProto : public ::google::protobuf::Message {
 public:
  CompressedRowSparseMatrixProto();
  virtual ~CompressedRowSparseMatrixProto();
  
  CompressedRowSparseMatrixProto(const CompressedRowSparseMatrixProto& from);
  
  inline CompressedRowSparseMatrixProto& operator=(const CompressedRowSparseMatrixProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const CompressedRowSparseMatrixProto& default_instance();
  
  void Swap(CompressedRowSparseMatrixProto* other);
  
  // implements Message ----------------------------------------------
  
  CompressedRowSparseMatrixProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CompressedRowSparseMatrixProto& from);
  void MergeFrom(const CompressedRowSparseMatrixProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 num_rows = 4;
  inline bool has_num_rows() const;
  inline void clear_num_rows();
  static const int kNumRowsFieldNumber = 4;
  inline ::google::protobuf::int64 num_rows() const;
  inline void set_num_rows(::google::protobuf::int64 value);
  
  // optional int64 num_cols = 5;
  inline bool has_num_cols() const;
  inline void clear_num_cols();
  static const int kNumColsFieldNumber = 5;
  inline ::google::protobuf::int64 num_cols() const;
  inline void set_num_cols(::google::protobuf::int64 value);
  
  // repeated int64 rows = 1 [packed = true];
  inline int rows_size() const;
  inline void clear_rows();
  static const int kRowsFieldNumber = 1;
  inline ::google::protobuf::int64 rows(int index) const;
  inline void set_rows(int index, ::google::protobuf::int64 value);
  inline void add_rows(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rows() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rows();
  
  // repeated int64 cols = 2 [packed = true];
  inline int cols_size() const;
  inline void clear_cols();
  static const int kColsFieldNumber = 2;
  inline ::google::protobuf::int64 cols(int index) const;
  inline void set_cols(int index, ::google::protobuf::int64 value);
  inline void add_cols(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      cols() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_cols();
  
  // repeated double values = 3 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 3;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();
  
  // @@protoc_insertion_point(class_scope:ceres.internal.CompressedRowSparseMatrixProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 num_rows_;
  ::google::protobuf::int64 num_cols_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rows_;
  mutable int _rows_cached_byte_size_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > cols_;
  mutable int _cols_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static CompressedRowSparseMatrixProto* default_instance_;
};
// -------------------------------------------------------------------

class DenseSparseMatrixProto : public ::google::protobuf::Message {
 public:
  DenseSparseMatrixProto();
  virtual ~DenseSparseMatrixProto();
  
  DenseSparseMatrixProto(const DenseSparseMatrixProto& from);
  
  inline DenseSparseMatrixProto& operator=(const DenseSparseMatrixProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const DenseSparseMatrixProto& default_instance();
  
  void Swap(DenseSparseMatrixProto* other);
  
  // implements Message ----------------------------------------------
  
  DenseSparseMatrixProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DenseSparseMatrixProto& from);
  void MergeFrom(const DenseSparseMatrixProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional int64 num_rows = 1;
  inline bool has_num_rows() const;
  inline void clear_num_rows();
  static const int kNumRowsFieldNumber = 1;
  inline ::google::protobuf::int64 num_rows() const;
  inline void set_num_rows(::google::protobuf::int64 value);
  
  // optional int64 num_cols = 2;
  inline bool has_num_cols() const;
  inline void clear_num_cols();
  static const int kNumColsFieldNumber = 2;
  inline ::google::protobuf::int64 num_cols() const;
  inline void set_num_cols(::google::protobuf::int64 value);
  
  // repeated double values = 3 [packed = true];
  inline int values_size() const;
  inline void clear_values();
  static const int kValuesFieldNumber = 3;
  inline double values(int index) const;
  inline void set_values(int index, double value);
  inline void add_values(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      values() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_values();
  
  // @@protoc_insertion_point(class_scope:ceres.internal.DenseSparseMatrixProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::google::protobuf::int64 num_rows_;
  ::google::protobuf::int64 num_cols_;
  ::google::protobuf::RepeatedField< double > values_;
  mutable int _values_cached_byte_size_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static DenseSparseMatrixProto* default_instance_;
};
// -------------------------------------------------------------------

class SparseMatrixProto : public ::google::protobuf::Message {
 public:
  SparseMatrixProto();
  virtual ~SparseMatrixProto();
  
  SparseMatrixProto(const SparseMatrixProto& from);
  
  inline SparseMatrixProto& operator=(const SparseMatrixProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const SparseMatrixProto& default_instance();
  
  void Swap(SparseMatrixProto* other);
  
  // implements Message ----------------------------------------------
  
  SparseMatrixProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SparseMatrixProto& from);
  void MergeFrom(const SparseMatrixProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ceres.internal.TripletSparseMatrixProto triplet_matrix = 1;
  inline bool has_triplet_matrix() const;
  inline void clear_triplet_matrix();
  static const int kTripletMatrixFieldNumber = 1;
  inline const ::ceres::internal::TripletSparseMatrixProto& triplet_matrix() const;
  inline ::ceres::internal::TripletSparseMatrixProto* mutable_triplet_matrix();
  
  // optional .ceres.internal.BlockSparseMatrixProto block_matrix = 2;
  inline bool has_block_matrix() const;
  inline void clear_block_matrix();
  static const int kBlockMatrixFieldNumber = 2;
  inline const ::ceres::internal::BlockSparseMatrixProto& block_matrix() const;
  inline ::ceres::internal::BlockSparseMatrixProto* mutable_block_matrix();
  
  // optional .ceres.internal.CompressedRowSparseMatrixProto compressed_row_matrix = 3;
  inline bool has_compressed_row_matrix() const;
  inline void clear_compressed_row_matrix();
  static const int kCompressedRowMatrixFieldNumber = 3;
  inline const ::ceres::internal::CompressedRowSparseMatrixProto& compressed_row_matrix() const;
  inline ::ceres::internal::CompressedRowSparseMatrixProto* mutable_compressed_row_matrix();
  
  // optional .ceres.internal.DenseSparseMatrixProto dense_matrix = 4;
  inline bool has_dense_matrix() const;
  inline void clear_dense_matrix();
  static const int kDenseMatrixFieldNumber = 4;
  inline const ::ceres::internal::DenseSparseMatrixProto& dense_matrix() const;
  inline ::ceres::internal::DenseSparseMatrixProto* mutable_dense_matrix();
  
  // @@protoc_insertion_point(class_scope:ceres.internal.SparseMatrixProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ceres::internal::TripletSparseMatrixProto* triplet_matrix_;
  ::ceres::internal::BlockSparseMatrixProto* block_matrix_;
  ::ceres::internal::CompressedRowSparseMatrixProto* compressed_row_matrix_;
  ::ceres::internal::DenseSparseMatrixProto* dense_matrix_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static SparseMatrixProto* default_instance_;
};
// -------------------------------------------------------------------

class LinearLeastSquaresProblemProto : public ::google::protobuf::Message {
 public:
  LinearLeastSquaresProblemProto();
  virtual ~LinearLeastSquaresProblemProto();
  
  LinearLeastSquaresProblemProto(const LinearLeastSquaresProblemProto& from);
  
  inline LinearLeastSquaresProblemProto& operator=(const LinearLeastSquaresProblemProto& from) {
    CopyFrom(from);
    return *this;
  }
  
  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }
  
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }
  
  static const ::google::protobuf::Descriptor* descriptor();
  static const LinearLeastSquaresProblemProto& default_instance();
  
  void Swap(LinearLeastSquaresProblemProto* other);
  
  // implements Message ----------------------------------------------
  
  LinearLeastSquaresProblemProto* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LinearLeastSquaresProblemProto& from);
  void MergeFrom(const LinearLeastSquaresProblemProto& from);
  void Clear();
  bool IsInitialized() const;
  
  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:
  
  ::google::protobuf::Metadata GetMetadata() const;
  
  // nested types ----------------------------------------------------
  
  // accessors -------------------------------------------------------
  
  // optional .ceres.internal.SparseMatrixProto a = 1;
  inline bool has_a() const;
  inline void clear_a();
  static const int kAFieldNumber = 1;
  inline const ::ceres::internal::SparseMatrixProto& a() const;
  inline ::ceres::internal::SparseMatrixProto* mutable_a();
  
  // repeated double b = 2 [packed = true];
  inline int b_size() const;
  inline void clear_b();
  static const int kBFieldNumber = 2;
  inline double b(int index) const;
  inline void set_b(int index, double value);
  inline void add_b(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      b() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_b();
  
  // repeated double d = 3 [packed = true];
  inline int d_size() const;
  inline void clear_d();
  static const int kDFieldNumber = 3;
  inline double d(int index) const;
  inline void set_d(int index, double value);
  inline void add_d(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      d() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_d();
  
  // repeated double x = 4 [packed = true];
  inline int x_size() const;
  inline void clear_x();
  static const int kXFieldNumber = 4;
  inline double x(int index) const;
  inline void set_x(int index, double value);
  inline void add_x(double value);
  inline const ::google::protobuf::RepeatedField< double >&
      x() const;
  inline ::google::protobuf::RepeatedField< double >*
      mutable_x();
  
  // optional int32 num_eliminate_blocks = 5;
  inline bool has_num_eliminate_blocks() const;
  inline void clear_num_eliminate_blocks();
  static const int kNumEliminateBlocksFieldNumber = 5;
  inline ::google::protobuf::int32 num_eliminate_blocks() const;
  inline void set_num_eliminate_blocks(::google::protobuf::int32 value);
  
  // @@protoc_insertion_point(class_scope:ceres.internal.LinearLeastSquaresProblemProto)
 private:
  ::google::protobuf::UnknownFieldSet _unknown_fields_;
  mutable int _cached_size_;
  
  ::ceres::internal::SparseMatrixProto* a_;
  ::google::protobuf::RepeatedField< double > b_;
  mutable int _b_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > d_;
  mutable int _d_cached_byte_size_;
  ::google::protobuf::RepeatedField< double > x_;
  mutable int _x_cached_byte_size_;
  ::google::protobuf::int32 num_eliminate_blocks_;
  friend void  protobuf_AddDesc_matrix_2eproto();
  friend void protobuf_AssignDesc_matrix_2eproto();
  friend void protobuf_ShutdownFile_matrix_2eproto();
  
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];
  
  // WHY DOES & HAVE LOWER PRECEDENCE THAN != !?
  inline bool _has_bit(int index) const {
    return (_has_bits_[index / 32] & (1u << (index % 32))) != 0;
  }
  inline void _set_bit(int index) {
    _has_bits_[index / 32] |= (1u << (index % 32));
  }
  inline void _clear_bit(int index) {
    _has_bits_[index / 32] &= ~(1u << (index % 32));
  }
  
  void InitAsDefaultInstance();
  static LinearLeastSquaresProblemProto* default_instance_;
};
// ===================================================================


// ===================================================================

// BlockProto

// optional int32 size = 1;
inline bool BlockProto::has_size() const {
  return _has_bit(0);
}
inline void BlockProto::clear_size() {
  size_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 BlockProto::size() const {
  return size_;
}
inline void BlockProto::set_size(::google::protobuf::int32 value) {
  _set_bit(0);
  size_ = value;
}

// optional int32 position = 2;
inline bool BlockProto::has_position() const {
  return _has_bit(1);
}
inline void BlockProto::clear_position() {
  position_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 BlockProto::position() const {
  return position_;
}
inline void BlockProto::set_position(::google::protobuf::int32 value) {
  _set_bit(1);
  position_ = value;
}

// -------------------------------------------------------------------

// CellProto

// optional int32 block_id = 1;
inline bool CellProto::has_block_id() const {
  return _has_bit(0);
}
inline void CellProto::clear_block_id() {
  block_id_ = 0;
  _clear_bit(0);
}
inline ::google::protobuf::int32 CellProto::block_id() const {
  return block_id_;
}
inline void CellProto::set_block_id(::google::protobuf::int32 value) {
  _set_bit(0);
  block_id_ = value;
}

// optional int32 position = 2;
inline bool CellProto::has_position() const {
  return _has_bit(1);
}
inline void CellProto::clear_position() {
  position_ = 0;
  _clear_bit(1);
}
inline ::google::protobuf::int32 CellProto::position() const {
  return position_;
}
inline void CellProto::set_position(::google::protobuf::int32 value) {
  _set_bit(1);
  position_ = value;
}

// -------------------------------------------------------------------

// CompressedRowProto

// optional .ceres.internal.BlockProto block = 2;
inline bool CompressedRowProto::has_block() const {
  return _has_bit(0);
}
inline void CompressedRowProto::clear_block() {
  if (block_ != NULL) block_->::ceres::internal::BlockProto::Clear();
  _clear_bit(0);
}
inline const ::ceres::internal::BlockProto& CompressedRowProto::block() const {
  return block_ != NULL ? *block_ : *default_instance_->block_;
}
inline ::ceres::internal::BlockProto* CompressedRowProto::mutable_block() {
  _set_bit(0);
  if (block_ == NULL) block_ = new ::ceres::internal::BlockProto;
  return block_;
}

// repeated .ceres.internal.CellProto cells = 1;
inline int CompressedRowProto::cells_size() const {
  return cells_.size();
}
inline void CompressedRowProto::clear_cells() {
  cells_.Clear();
}
inline const ::ceres::internal::CellProto& CompressedRowProto::cells(int index) const {
  return cells_.Get(index);
}
inline ::ceres::internal::CellProto* CompressedRowProto::mutable_cells(int index) {
  return cells_.Mutable(index);
}
inline ::ceres::internal::CellProto* CompressedRowProto::add_cells() {
  return cells_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ceres::internal::CellProto >&
CompressedRowProto::cells() const {
  return cells_;
}
inline ::google::protobuf::RepeatedPtrField< ::ceres::internal::CellProto >*
CompressedRowProto::mutable_cells() {
  return &cells_;
}

// -------------------------------------------------------------------

// BlockStructureProto

// repeated .ceres.internal.BlockProto cols = 1;
inline int BlockStructureProto::cols_size() const {
  return cols_.size();
}
inline void BlockStructureProto::clear_cols() {
  cols_.Clear();
}
inline const ::ceres::internal::BlockProto& BlockStructureProto::cols(int index) const {
  return cols_.Get(index);
}
inline ::ceres::internal::BlockProto* BlockStructureProto::mutable_cols(int index) {
  return cols_.Mutable(index);
}
inline ::ceres::internal::BlockProto* BlockStructureProto::add_cols() {
  return cols_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ceres::internal::BlockProto >&
BlockStructureProto::cols() const {
  return cols_;
}
inline ::google::protobuf::RepeatedPtrField< ::ceres::internal::BlockProto >*
BlockStructureProto::mutable_cols() {
  return &cols_;
}

// repeated .ceres.internal.CompressedRowProto rows = 2;
inline int BlockStructureProto::rows_size() const {
  return rows_.size();
}
inline void BlockStructureProto::clear_rows() {
  rows_.Clear();
}
inline const ::ceres::internal::CompressedRowProto& BlockStructureProto::rows(int index) const {
  return rows_.Get(index);
}
inline ::ceres::internal::CompressedRowProto* BlockStructureProto::mutable_rows(int index) {
  return rows_.Mutable(index);
}
inline ::ceres::internal::CompressedRowProto* BlockStructureProto::add_rows() {
  return rows_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ceres::internal::CompressedRowProto >&
BlockStructureProto::rows() const {
  return rows_;
}
inline ::google::protobuf::RepeatedPtrField< ::ceres::internal::CompressedRowProto >*
BlockStructureProto::mutable_rows() {
  return &rows_;
}

// -------------------------------------------------------------------

// BlockSparseMatrixProto

// optional int64 num_rows = 2;
inline bool BlockSparseMatrixProto::has_num_rows() const {
  return _has_bit(0);
}
inline void BlockSparseMatrixProto::clear_num_rows() {
  num_rows_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 BlockSparseMatrixProto::num_rows() const {
  return num_rows_;
}
inline void BlockSparseMatrixProto::set_num_rows(::google::protobuf::int64 value) {
  _set_bit(0);
  num_rows_ = value;
}

// optional int64 num_cols = 3;
inline bool BlockSparseMatrixProto::has_num_cols() const {
  return _has_bit(1);
}
inline void BlockSparseMatrixProto::clear_num_cols() {
  num_cols_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 BlockSparseMatrixProto::num_cols() const {
  return num_cols_;
}
inline void BlockSparseMatrixProto::set_num_cols(::google::protobuf::int64 value) {
  _set_bit(1);
  num_cols_ = value;
}

// optional int64 num_nonzeros = 4;
inline bool BlockSparseMatrixProto::has_num_nonzeros() const {
  return _has_bit(2);
}
inline void BlockSparseMatrixProto::clear_num_nonzeros() {
  num_nonzeros_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 BlockSparseMatrixProto::num_nonzeros() const {
  return num_nonzeros_;
}
inline void BlockSparseMatrixProto::set_num_nonzeros(::google::protobuf::int64 value) {
  _set_bit(2);
  num_nonzeros_ = value;
}

// repeated double values = 1 [packed = true];
inline int BlockSparseMatrixProto::values_size() const {
  return values_.size();
}
inline void BlockSparseMatrixProto::clear_values() {
  values_.Clear();
}
inline double BlockSparseMatrixProto::values(int index) const {
  return values_.Get(index);
}
inline void BlockSparseMatrixProto::set_values(int index, double value) {
  values_.Set(index, value);
}
inline void BlockSparseMatrixProto::add_values(double value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
BlockSparseMatrixProto::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
BlockSparseMatrixProto::mutable_values() {
  return &values_;
}

// optional .ceres.internal.BlockStructureProto block_structure = 5;
inline bool BlockSparseMatrixProto::has_block_structure() const {
  return _has_bit(4);
}
inline void BlockSparseMatrixProto::clear_block_structure() {
  if (block_structure_ != NULL) block_structure_->::ceres::internal::BlockStructureProto::Clear();
  _clear_bit(4);
}
inline const ::ceres::internal::BlockStructureProto& BlockSparseMatrixProto::block_structure() const {
  return block_structure_ != NULL ? *block_structure_ : *default_instance_->block_structure_;
}
inline ::ceres::internal::BlockStructureProto* BlockSparseMatrixProto::mutable_block_structure() {
  _set_bit(4);
  if (block_structure_ == NULL) block_structure_ = new ::ceres::internal::BlockStructureProto;
  return block_structure_;
}

// -------------------------------------------------------------------

// TripletSparseMatrixProto

// optional int64 num_rows = 4;
inline bool TripletSparseMatrixProto::has_num_rows() const {
  return _has_bit(0);
}
inline void TripletSparseMatrixProto::clear_num_rows() {
  num_rows_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 TripletSparseMatrixProto::num_rows() const {
  return num_rows_;
}
inline void TripletSparseMatrixProto::set_num_rows(::google::protobuf::int64 value) {
  _set_bit(0);
  num_rows_ = value;
}

// optional int64 num_cols = 5;
inline bool TripletSparseMatrixProto::has_num_cols() const {
  return _has_bit(1);
}
inline void TripletSparseMatrixProto::clear_num_cols() {
  num_cols_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 TripletSparseMatrixProto::num_cols() const {
  return num_cols_;
}
inline void TripletSparseMatrixProto::set_num_cols(::google::protobuf::int64 value) {
  _set_bit(1);
  num_cols_ = value;
}

// optional int64 num_nonzeros = 6;
inline bool TripletSparseMatrixProto::has_num_nonzeros() const {
  return _has_bit(2);
}
inline void TripletSparseMatrixProto::clear_num_nonzeros() {
  num_nonzeros_ = GOOGLE_LONGLONG(0);
  _clear_bit(2);
}
inline ::google::protobuf::int64 TripletSparseMatrixProto::num_nonzeros() const {
  return num_nonzeros_;
}
inline void TripletSparseMatrixProto::set_num_nonzeros(::google::protobuf::int64 value) {
  _set_bit(2);
  num_nonzeros_ = value;
}

// repeated int64 rows = 1 [packed = true];
inline int TripletSparseMatrixProto::rows_size() const {
  return rows_.size();
}
inline void TripletSparseMatrixProto::clear_rows() {
  rows_.Clear();
}
inline ::google::protobuf::int64 TripletSparseMatrixProto::rows(int index) const {
  return rows_.Get(index);
}
inline void TripletSparseMatrixProto::set_rows(int index, ::google::protobuf::int64 value) {
  rows_.Set(index, value);
}
inline void TripletSparseMatrixProto::add_rows(::google::protobuf::int64 value) {
  rows_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TripletSparseMatrixProto::rows() const {
  return rows_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TripletSparseMatrixProto::mutable_rows() {
  return &rows_;
}

// repeated int64 cols = 2 [packed = true];
inline int TripletSparseMatrixProto::cols_size() const {
  return cols_.size();
}
inline void TripletSparseMatrixProto::clear_cols() {
  cols_.Clear();
}
inline ::google::protobuf::int64 TripletSparseMatrixProto::cols(int index) const {
  return cols_.Get(index);
}
inline void TripletSparseMatrixProto::set_cols(int index, ::google::protobuf::int64 value) {
  cols_.Set(index, value);
}
inline void TripletSparseMatrixProto::add_cols(::google::protobuf::int64 value) {
  cols_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
TripletSparseMatrixProto::cols() const {
  return cols_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
TripletSparseMatrixProto::mutable_cols() {
  return &cols_;
}

// repeated double values = 3 [packed = true];
inline int TripletSparseMatrixProto::values_size() const {
  return values_.size();
}
inline void TripletSparseMatrixProto::clear_values() {
  values_.Clear();
}
inline double TripletSparseMatrixProto::values(int index) const {
  return values_.Get(index);
}
inline void TripletSparseMatrixProto::set_values(int index, double value) {
  values_.Set(index, value);
}
inline void TripletSparseMatrixProto::add_values(double value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
TripletSparseMatrixProto::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
TripletSparseMatrixProto::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// CompressedRowSparseMatrixProto

// optional int64 num_rows = 4;
inline bool CompressedRowSparseMatrixProto::has_num_rows() const {
  return _has_bit(0);
}
inline void CompressedRowSparseMatrixProto::clear_num_rows() {
  num_rows_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 CompressedRowSparseMatrixProto::num_rows() const {
  return num_rows_;
}
inline void CompressedRowSparseMatrixProto::set_num_rows(::google::protobuf::int64 value) {
  _set_bit(0);
  num_rows_ = value;
}

// optional int64 num_cols = 5;
inline bool CompressedRowSparseMatrixProto::has_num_cols() const {
  return _has_bit(1);
}
inline void CompressedRowSparseMatrixProto::clear_num_cols() {
  num_cols_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 CompressedRowSparseMatrixProto::num_cols() const {
  return num_cols_;
}
inline void CompressedRowSparseMatrixProto::set_num_cols(::google::protobuf::int64 value) {
  _set_bit(1);
  num_cols_ = value;
}

// repeated int64 rows = 1 [packed = true];
inline int CompressedRowSparseMatrixProto::rows_size() const {
  return rows_.size();
}
inline void CompressedRowSparseMatrixProto::clear_rows() {
  rows_.Clear();
}
inline ::google::protobuf::int64 CompressedRowSparseMatrixProto::rows(int index) const {
  return rows_.Get(index);
}
inline void CompressedRowSparseMatrixProto::set_rows(int index, ::google::protobuf::int64 value) {
  rows_.Set(index, value);
}
inline void CompressedRowSparseMatrixProto::add_rows(::google::protobuf::int64 value) {
  rows_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CompressedRowSparseMatrixProto::rows() const {
  return rows_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CompressedRowSparseMatrixProto::mutable_rows() {
  return &rows_;
}

// repeated int64 cols = 2 [packed = true];
inline int CompressedRowSparseMatrixProto::cols_size() const {
  return cols_.size();
}
inline void CompressedRowSparseMatrixProto::clear_cols() {
  cols_.Clear();
}
inline ::google::protobuf::int64 CompressedRowSparseMatrixProto::cols(int index) const {
  return cols_.Get(index);
}
inline void CompressedRowSparseMatrixProto::set_cols(int index, ::google::protobuf::int64 value) {
  cols_.Set(index, value);
}
inline void CompressedRowSparseMatrixProto::add_cols(::google::protobuf::int64 value) {
  cols_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
CompressedRowSparseMatrixProto::cols() const {
  return cols_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
CompressedRowSparseMatrixProto::mutable_cols() {
  return &cols_;
}

// repeated double values = 3 [packed = true];
inline int CompressedRowSparseMatrixProto::values_size() const {
  return values_.size();
}
inline void CompressedRowSparseMatrixProto::clear_values() {
  values_.Clear();
}
inline double CompressedRowSparseMatrixProto::values(int index) const {
  return values_.Get(index);
}
inline void CompressedRowSparseMatrixProto::set_values(int index, double value) {
  values_.Set(index, value);
}
inline void CompressedRowSparseMatrixProto::add_values(double value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
CompressedRowSparseMatrixProto::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
CompressedRowSparseMatrixProto::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// DenseSparseMatrixProto

// optional int64 num_rows = 1;
inline bool DenseSparseMatrixProto::has_num_rows() const {
  return _has_bit(0);
}
inline void DenseSparseMatrixProto::clear_num_rows() {
  num_rows_ = GOOGLE_LONGLONG(0);
  _clear_bit(0);
}
inline ::google::protobuf::int64 DenseSparseMatrixProto::num_rows() const {
  return num_rows_;
}
inline void DenseSparseMatrixProto::set_num_rows(::google::protobuf::int64 value) {
  _set_bit(0);
  num_rows_ = value;
}

// optional int64 num_cols = 2;
inline bool DenseSparseMatrixProto::has_num_cols() const {
  return _has_bit(1);
}
inline void DenseSparseMatrixProto::clear_num_cols() {
  num_cols_ = GOOGLE_LONGLONG(0);
  _clear_bit(1);
}
inline ::google::protobuf::int64 DenseSparseMatrixProto::num_cols() const {
  return num_cols_;
}
inline void DenseSparseMatrixProto::set_num_cols(::google::protobuf::int64 value) {
  _set_bit(1);
  num_cols_ = value;
}

// repeated double values = 3 [packed = true];
inline int DenseSparseMatrixProto::values_size() const {
  return values_.size();
}
inline void DenseSparseMatrixProto::clear_values() {
  values_.Clear();
}
inline double DenseSparseMatrixProto::values(int index) const {
  return values_.Get(index);
}
inline void DenseSparseMatrixProto::set_values(int index, double value) {
  values_.Set(index, value);
}
inline void DenseSparseMatrixProto::add_values(double value) {
  values_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
DenseSparseMatrixProto::values() const {
  return values_;
}
inline ::google::protobuf::RepeatedField< double >*
DenseSparseMatrixProto::mutable_values() {
  return &values_;
}

// -------------------------------------------------------------------

// SparseMatrixProto

// optional .ceres.internal.TripletSparseMatrixProto triplet_matrix = 1;
inline bool SparseMatrixProto::has_triplet_matrix() const {
  return _has_bit(0);
}
inline void SparseMatrixProto::clear_triplet_matrix() {
  if (triplet_matrix_ != NULL) triplet_matrix_->::ceres::internal::TripletSparseMatrixProto::Clear();
  _clear_bit(0);
}
inline const ::ceres::internal::TripletSparseMatrixProto& SparseMatrixProto::triplet_matrix() const {
  return triplet_matrix_ != NULL ? *triplet_matrix_ : *default_instance_->triplet_matrix_;
}
inline ::ceres::internal::TripletSparseMatrixProto* SparseMatrixProto::mutable_triplet_matrix() {
  _set_bit(0);
  if (triplet_matrix_ == NULL) triplet_matrix_ = new ::ceres::internal::TripletSparseMatrixProto;
  return triplet_matrix_;
}

// optional .ceres.internal.BlockSparseMatrixProto block_matrix = 2;
inline bool SparseMatrixProto::has_block_matrix() const {
  return _has_bit(1);
}
inline void SparseMatrixProto::clear_block_matrix() {
  if (block_matrix_ != NULL) block_matrix_->::ceres::internal::BlockSparseMatrixProto::Clear();
  _clear_bit(1);
}
inline const ::ceres::internal::BlockSparseMatrixProto& SparseMatrixProto::block_matrix() const {
  return block_matrix_ != NULL ? *block_matrix_ : *default_instance_->block_matrix_;
}
inline ::ceres::internal::BlockSparseMatrixProto* SparseMatrixProto::mutable_block_matrix() {
  _set_bit(1);
  if (block_matrix_ == NULL) block_matrix_ = new ::ceres::internal::BlockSparseMatrixProto;
  return block_matrix_;
}

// optional .ceres.internal.CompressedRowSparseMatrixProto compressed_row_matrix = 3;
inline bool SparseMatrixProto::has_compressed_row_matrix() const {
  return _has_bit(2);
}
inline void SparseMatrixProto::clear_compressed_row_matrix() {
  if (compressed_row_matrix_ != NULL) compressed_row_matrix_->::ceres::internal::CompressedRowSparseMatrixProto::Clear();
  _clear_bit(2);
}
inline const ::ceres::internal::CompressedRowSparseMatrixProto& SparseMatrixProto::compressed_row_matrix() const {
  return compressed_row_matrix_ != NULL ? *compressed_row_matrix_ : *default_instance_->compressed_row_matrix_;
}
inline ::ceres::internal::CompressedRowSparseMatrixProto* SparseMatrixProto::mutable_compressed_row_matrix() {
  _set_bit(2);
  if (compressed_row_matrix_ == NULL) compressed_row_matrix_ = new ::ceres::internal::CompressedRowSparseMatrixProto;
  return compressed_row_matrix_;
}

// optional .ceres.internal.DenseSparseMatrixProto dense_matrix = 4;
inline bool SparseMatrixProto::has_dense_matrix() const {
  return _has_bit(3);
}
inline void SparseMatrixProto::clear_dense_matrix() {
  if (dense_matrix_ != NULL) dense_matrix_->::ceres::internal::DenseSparseMatrixProto::Clear();
  _clear_bit(3);
}
inline const ::ceres::internal::DenseSparseMatrixProto& SparseMatrixProto::dense_matrix() const {
  return dense_matrix_ != NULL ? *dense_matrix_ : *default_instance_->dense_matrix_;
}
inline ::ceres::internal::DenseSparseMatrixProto* SparseMatrixProto::mutable_dense_matrix() {
  _set_bit(3);
  if (dense_matrix_ == NULL) dense_matrix_ = new ::ceres::internal::DenseSparseMatrixProto;
  return dense_matrix_;
}

// -------------------------------------------------------------------

// LinearLeastSquaresProblemProto

// optional .ceres.internal.SparseMatrixProto a = 1;
inline bool LinearLeastSquaresProblemProto::has_a() const {
  return _has_bit(0);
}
inline void LinearLeastSquaresProblemProto::clear_a() {
  if (a_ != NULL) a_->::ceres::internal::SparseMatrixProto::Clear();
  _clear_bit(0);
}
inline const ::ceres::internal::SparseMatrixProto& LinearLeastSquaresProblemProto::a() const {
  return a_ != NULL ? *a_ : *default_instance_->a_;
}
inline ::ceres::internal::SparseMatrixProto* LinearLeastSquaresProblemProto::mutable_a() {
  _set_bit(0);
  if (a_ == NULL) a_ = new ::ceres::internal::SparseMatrixProto;
  return a_;
}

// repeated double b = 2 [packed = true];
inline int LinearLeastSquaresProblemProto::b_size() const {
  return b_.size();
}
inline void LinearLeastSquaresProblemProto::clear_b() {
  b_.Clear();
}
inline double LinearLeastSquaresProblemProto::b(int index) const {
  return b_.Get(index);
}
inline void LinearLeastSquaresProblemProto::set_b(int index, double value) {
  b_.Set(index, value);
}
inline void LinearLeastSquaresProblemProto::add_b(double value) {
  b_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
LinearLeastSquaresProblemProto::b() const {
  return b_;
}
inline ::google::protobuf::RepeatedField< double >*
LinearLeastSquaresProblemProto::mutable_b() {
  return &b_;
}

// repeated double d = 3 [packed = true];
inline int LinearLeastSquaresProblemProto::d_size() const {
  return d_.size();
}
inline void LinearLeastSquaresProblemProto::clear_d() {
  d_.Clear();
}
inline double LinearLeastSquaresProblemProto::d(int index) const {
  return d_.Get(index);
}
inline void LinearLeastSquaresProblemProto::set_d(int index, double value) {
  d_.Set(index, value);
}
inline void LinearLeastSquaresProblemProto::add_d(double value) {
  d_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
LinearLeastSquaresProblemProto::d() const {
  return d_;
}
inline ::google::protobuf::RepeatedField< double >*
LinearLeastSquaresProblemProto::mutable_d() {
  return &d_;
}

// repeated double x = 4 [packed = true];
inline int LinearLeastSquaresProblemProto::x_size() const {
  return x_.size();
}
inline void LinearLeastSquaresProblemProto::clear_x() {
  x_.Clear();
}
inline double LinearLeastSquaresProblemProto::x(int index) const {
  return x_.Get(index);
}
inline void LinearLeastSquaresProblemProto::set_x(int index, double value) {
  x_.Set(index, value);
}
inline void LinearLeastSquaresProblemProto::add_x(double value) {
  x_.Add(value);
}
inline const ::google::protobuf::RepeatedField< double >&
LinearLeastSquaresProblemProto::x() const {
  return x_;
}
inline ::google::protobuf::RepeatedField< double >*
LinearLeastSquaresProblemProto::mutable_x() {
  return &x_;
}

// optional int32 num_eliminate_blocks = 5;
inline bool LinearLeastSquaresProblemProto::has_num_eliminate_blocks() const {
  return _has_bit(4);
}
inline void LinearLeastSquaresProblemProto::clear_num_eliminate_blocks() {
  num_eliminate_blocks_ = 0;
  _clear_bit(4);
}
inline ::google::protobuf::int32 LinearLeastSquaresProblemProto::num_eliminate_blocks() const {
  return num_eliminate_blocks_;
}
inline void LinearLeastSquaresProblemProto::set_num_eliminate_blocks(::google::protobuf::int32 value) {
  _set_bit(4);
  num_eliminate_blocks_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace internal
}  // namespace ceres

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_matrix_2eproto__INCLUDED
